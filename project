#!/bin/bash

PROJECTS_PATH="${HOME}/Projects/"
WEB=false

while test $# -gt 0; do
  case "$1" in
    -w|--web)
      shift
      WEB=true
      break
      ;;
      *)
      break
      ;;
  esac
done

slugName() {
    PROJECT_NAME=$(echo "$@" | iconv -t ascii//TRANSLIT | sed -E 's/[~\^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+\|-+$//g' | tr A-Z a-z)
    PROJECT_PATH="${PROJECTS_PATH}${PROJECT_NAME}"
}

slugName $1

[ -d "${PROJECT_PATH}" ] && echo "There's already something at ${PROJECT_PATH}, please create a project with a different name" && exit 1

mkdir -p "${PROJECT_PATH}"

[ -d "${PROJECT_PATH}" ] && echo "Created a new directory at ${PROJECT_PATH}"
[ ! -d "${PROJECT_PATH}" ] && echo "Could not create ${PROJECT_PATH}" && exit 1

cd "${PROJECT_PATH}"

cat > .prettierrc << EOF
{
  "useTabs": true,
  "semi": false,
  "arrowParens": "avoid"
}
EOF

cat > .gitignore << EOF
node_modules
dist
build
.env
.cache
.log
dump
.parcel-cache
EOF

cat > readme.md << EOF
# ${1}
EOF

node -v > .nvmrc

[ ! -f "package.json" ] && npm init -y

sleep 1.5

if $WEB
then
  node -p "JSON.stringify(Object.assign({ ...require('./package.json') }, { version: '0.0.1', main: './src/index.js', scripts: { 'dev': 'parcel index.html', 'build': 'parcel build index.html' } }), null, 2);" > package_tmp.json
else
  node -p "JSON.stringify(Object.assign({ ...require('./package.json') }, { version: '0.0.1', targets: {'default': {'context': 'node', 'engines': {'node': '>= 18'}}}, source: './src/index.js', scripts: { 'dev': 'concurrently-await --names watch,run \"parcel watch --target default --no-hmr await --includes built\" \"nodemon dist/index.js --delay 3\"', 'build': 'parcel build' } }), null, 2);" > package_tmp.json
fi

	

rm package.json
mv package_tmp.json package.json

if $WEB
then
  npm i -D parcel prettier eslint eslint-plugin-react
  npm i react react-dom
else
  npm i -D parcel nodemon concurrently-await prettier eslint
fi

touch .eslintrc.json
if $WEB
then
  cat > .eslintrc.json << EOF
{
	"env": {
		"browser": true,
		"es2021": true
	},
	"extends": ["eslint:recommended", "plugin:react/recommended"],
	"parserOptions": {
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 12,
		"sourceType": "module"
	},
	"plugins": ["react"],
	"rules": {
		"react/react-in-jsx-scope": 0,
		"react/prop-types": 0,
		"react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
		"no-unused-vars": [
			"error",
			{
				"argsIgnorePattern": "^_",
				"varsIgnorePattern": "^_",
				"ignoreRestSiblings": true
			}
		],
		"no-mixed-spaces-and-tabs": ["warn", "smart-tabs"]
	}
}
EOF
else
  cat > .eslintrc.json << EOF
{
	"env": {
		"es2021": true,
		"node": true
	},
	"extends": ["eslint:recommended"],
	"parserOptions": {
		"ecmaVersion": 12,
		"sourceType": "module"
	},
	"rules": {
		"no-unused-vars": [
			"error",
			{
				"argsIgnorePattern": "^_",
				"varsIgnorePattern": "^_",
				"ignoreRestSiblings": true
			}
		],
		"no-mixed-spaces-and-tabs": ["warn", "smart-tabs"]
	}
}
EOF
fi

npx sort-package-json

mkdir -p src
touch src/index.js

if $WEB
then
  cat > src/index.js << EOF
import React from "react"
import { createRoot } from "react-dom/client"
import App from "./app"
import "./scss/index.scss"

const root = createRoot(document.getElementById("app"))
root.render(<App />)
EOF

  touch src/app.js
  cat > src/app.js << EOF
import React from "react"

const App = () => {
	return <h1>Hello World</h1>
}

export default App
EOF

mkdir -p src/scss
touch src/scss/index.scss
  cat > src/scss/index.scss << EOF
html,
body {
	background-color: #fbfbfb;
}
EOF

touch index.html
cat > index.html << EOF
<html>
	<body>
		<div id="app"></div>

		<script src="./src/index.js" type="module"></script>
	</body>
</html>
EOF



fi

git init

code .
# open .

# echo "Esperança do vôo do avião" | iconv -t ascii//TRANSLIT | sed -E 's/[~\^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+\|-+$//g' | tr A-Z a-z